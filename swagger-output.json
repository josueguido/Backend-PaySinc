{
  "openapi": "3.0.0",
  "info": {
    "title": "PaySinc API",
    "version": "1.0.0",
    "description": "API for managing expenses, friends, and groups"
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "paths": {
    "/api/auth/login": {
      "post": {
        "summary": "Login a user",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "minLength": 5,
                    "maxLength": 255,
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 128,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\w\\s]).*$",
                    "example": "Passw0rd!",
                    "description": "Must be 6–128 characters long and include an uppercase, lowercase, number, and special character."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful, returns access and refresh tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "username": "josue123"
                }
              }
            }
          },
          "400": {
            "description": "Missing fields"
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "username"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "example": "josue123"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 128,
                    "example": "Password123!",
                    "description": "Must be 6–128 characters and include uppercase, lowercase, number, and special character."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email already registered"
          }
        }
      }
    },
    "/api/auth/refresh-token": {
      "post": {
        "summary": "Refresh an access token",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "your_refresh_token"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a new access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or revoked refresh token"
          },
          "403": {
            "description": "Expired or invalid token"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "Logout user and revoke refresh token",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "your_refresh_token"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful"
          },
          "400": {
            "description": "Token is required"
          }
        }
      }
    },
    "/api/expenses": {
      "get": {
        "summary": "Get all expenses with optional filters",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number (pagination)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "group_id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of expenses"
          },
          "500": {
            "description": "Error fetching expenses"
          }
        }
      },
      "post": {
        "summary": "Create a new expense",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "description",
                  "amount",
                  "date"
                ],
                "properties": {
                  "group_id": {
                    "type": "integer"
                  },
                  "description": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "number"
                  },
                  "paid_by_friend_id": {
                    "type": "integer"
                  },
                  "category": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string",
                    "format": "date"
                  },
                  "note": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Expense created"
          },
          "500": {
            "description": "Error creating expense"
          }
        }
      }
    },
    "/api/expenses/{id}": {
      "get": {
        "summary": "Get an expense by ID",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Expense data"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Error fetching expense"
          }
        }
      },
      "put": {
        "summary": "Update an existing expense",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "description",
                  "amount",
                  "date"
                ],
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "amount": {
                    "type": "number"
                  },
                  "paid_by_friend_id": {
                    "type": "integer"
                  },
                  "category": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string",
                    "format": "date"
                  },
                  "note": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expense updated"
          },
          "404": {
            "description": "Not found or unauthorized"
          },
          "500": {
            "description": "Error updating expense"
          }
        }
      },
      "delete": {
        "summary": "Soft delete an expense by ID",
        "tags": [
          "Expenses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Expense deleted"
          },
          "404": {
            "description": "Expense not found or unauthorized"
          },
          "500": {
            "description": "Error deleting expense"
          }
        }
      }
    },
    "/api/friends": {
      "get": {
        "summary": "Get all friends",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of friends",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "user_id": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving friends"
          }
        }
      },
      "post": {
        "summary": "Create a new friend",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Friend created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error creating friend"
          }
        }
      }
    },
    "/api/friends/{id}": {
      "get": {
        "summary": "Get a friend by ID",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Friend found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Friend not found"
          },
          "500": {
            "description": "Error retrieving friend"
          }
        }
      },
      "put": {
        "summary": "Update a friend by ID",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Friend ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "John Doe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Friend updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Friend not found or not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Friend not found or not authorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while updating friend",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error updating friend"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a friend by ID",
        "tags": [
          "Friends"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Friend deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "friend": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "user_id": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Friend not found or not authorized"
          },
          "500": {
            "description": "Error deleting friend"
          }
        }
      }
    },
    "/api/groups": {
      "get": {
        "summary": "Get all groups",
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "user_id": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error retrieving groups"
          }
        }
      },
      "post": {
        "summary": "Create a new group",
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "description"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "My Group"
                  },
                  "description": {
                    "type": "string",
                    "example": "This is a test group"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group created"
          },
          "500": {
            "description": "Error creating group"
          }
        }
      }
    },
    "/api/groups/{id}": {
      "get": {
        "summary": "Get a group by ID",
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "user_id": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Group not found"
          },
          "500": {
            "description": "Error retrieving group"
          }
        }
      },
      "put": {
        "summary": "Update a group by ID",
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "description"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Group"
                  },
                  "description": {
                    "type": "string",
                    "example": "Updated description"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group updated"
          },
          "404": {
            "description": "Group not found or not authorized"
          },
          "500": {
            "description": "Error updating group"
          }
        }
      },
      "delete": {
        "summary": "Delete a group by ID",
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "group": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "user_id": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Group not found or not authorized"
          },
          "500": {
            "description": "Error deleting group"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Expenses",
      "description": "Expense management endpoints"
    },
    {
      "name": "Friends",
      "description": "Friend management endpoints"
    },
    {
      "name": "Groups",
      "description": "Group management endpoints"
    }
  ]
}